# -*- coding: utf-8 -*-
"""Vodafone_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nxef1EYAjO2h27Al3dS9MvRPA7hxLIv9

#Goal

The aim of this notebook is to examine which customer groups are affected by a high churn rate by doing Exploratory data analysis. The churn rate represents the ratio of lost customers to total customers in a specific period of time.

According to experts, the cost of acquiring new customers is up to five times higher than keeping existing customers. Customer loyalty is therefore a central goal of a sustainable business strategy. An important element of this strategy is the prevention of customer churn. In the digital age, this is more true than ever, as offers can be compared very easily.

In the telecommunication sector customer churn is one of the biggest problems. Vodafone, for example, in Uk Churn rate has been between 15-22% from 2015 to 2020 financial year.(source: https://www.statista.com/statistics/685125/vodafone-contract-churn-rate-in-the-uk/). It is therefore important for telecommunication companies like Vodafone to analyze relevant customer data in order to retain customers and develop strategies to reduce the churn rate.
"""

# import libraries
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import seaborn as sns
from collections import OrderedDict
cmaps = OrderedDict()
import warnings
warnings.filterwarnings("ignore")

# definition of colors
custom_colors=['#c14953','#d96548','#f2a553','#f3c969','#98e2c6', '#86c1b2', '#74a09e']
customPalette = sns.set_palette(sns.color_palette(custom_colors))

# loading dataset

df= pd.read_csv("/WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.head(10)

df.info()

df.isnull().sum()

"""#Data Preparation:

###Datatype, misiing values and data cleaning

Total charges with data type "object" have to be converted into "float" to make calculations later on. For senior citizen, which is a categorical feature as well, the values of 0 (=no) and 1 (=yes) are put in inverted commas (str) to convert this feature into data type "object" as well.

"""

# convert data types and impute missing values with zero
df["TotalCharges"] = df["TotalCharges"].replace(" ", 0).astype("float32")
df["SeniorCitizen"] = df["SeniorCitizen"].replace(0, "0").replace(1, "1")

"""###Split Features

Features are split into numeric and categorical features. Shape and head for numeric resp. categorical features are shown.
"""

# numeric features
num_features = df[["tenure", "MonthlyCharges", "TotalCharges"]]

num_features.head()

num_features.shape

cat_features = df[["gender", "SeniorCitizen", "Partner", "Dependents",
                   "PhoneService", "MultipleLines", "InternetService",
                   "OnlineSecurity", "OnlineBackup", "DeviceProtection",
                   "TechSupport", "StreamingTV", "StreamingMovies", "Contract",
                   "PaperlessBilling", "PaymentMethod"]]

cat_features.head()

cat_features.shape

"""###Outlier Detection

There are different statistical methods for identifying outliers. The IQR rule is used here. The IQR (Inter Quartile Range) is defined as the difference between the upper (Q3) and the lower quartile (Q1). With this common rule, a value is treated as an outlier if it falls more than 1.5 IQR above the upper quartile (Q3) or below the lower quartile (Q1). Lower outliers are also below Q1-1.5 IQR, upper outliers above Q3 + 1.5 * IQR. With box plots outlier can be displayed graphically.
"""

# outlier detection
def boxplot(num_features):
    plt.figure(figsize=(6,1))
    ax = sns.boxplot(num_features, width=0.3, whis=1.5, color="#f3c969")
    ax.xaxis.labelpad=10
boxplot(df["tenure"])
boxplot(df["MonthlyCharges"])
boxplot(df["TotalCharges"])

"""we can see that there are no outliers in the specified columns

#EDA

Target Variable

What is the overall churn rate?
"""

# target variable - churn rate
plt.figure(figsize=(6,6))
plt.pie(df["Churn"].value_counts(),shadow=False,startangle=90,
        labels=df["Churn"].value_counts().index,autopct='%0.1f%%',
        explode=(0,0.05),colors=['#74a09e','#c14953'])
plt.title('Churn Rate')
plt.show()

"""The overall churn rate is 26.5%.

So let's look at different customer groups. Which groups have a higher probability to churn?

###Numeric Features

For the numeric features kernel density estimate (KDE) functions are caluclated and plotted
"""

# KDEplots for numeric features
def kdeplot(feature):
    plt.figure(figsize=(9,2))
    plt.title("KDE for {}".format(feature))
    # plt.tight_layout(pad=1.2)
    ax_kde = sns.kdeplot(df[df['Churn'] == 'No'][feature].dropna(), color= '#74a09e', label= 'Churn: No', shade='True')
    ax_kde = sns.kdeplot(df[df['Churn'] == 'Yes'][feature].dropna(), color= "#c14953", label= 'Churn: Yes', shade='True')
    ax_kde.yaxis.labelpad=10
    ax_kde.xaxis.labelpad=10
    ax_kde.yaxis.set_major_formatter(mpl.ticker.StrMethodFormatter('{x:,.4f}'))
    sns.despine(left="True")
kdeplot("tenure")
kdeplot("MonthlyCharges")
kdeplot ("TotalCharges")

"""The following conclusions can be drawn:

1. New customers with a short tenure are more likely to switch.
2. Customers who pay higher monthly fees are also more likely to churn.

###Categorical Features

For the categorical features barplots show the differences between target groups.
"""

#Plotting the impact of categorical features on ‘Churn’
plt.figure(figsize=(25,25))
for i,cat in enumerate(cat_features):
 plt.subplot(6,3,i+1)
 sns.countplot(data = df, x= cat, hue = "Churn")
plt.show()

"""we can generate the following insights-

1- Gender seems to play no role in churn

2-Customers having no dependents are more likely to be churned than the ones who have dependents.

3-Customers having Fiber Optic cables for the internet are more likely to be churned and the ones that have DSL are less likely to be churned.

4-Customers who do not have Online security, Online data backup, Device protection, and tech support services are more likely to be churned.

5-Customers on a month-to-month contract are more likely to be churned as they are not bonded with any policy.
"""

#we will create a new feature named "tenure_grp" by grouping the tenure feature into bins

df["tenure_grp"] = pd.cut(df["tenure"], bins=[0,12,24,36,48,60,np.inf], labels=["0–12", "13–24", "25–36", "37–48", "49–60", "60+"])

sns.countplot(data = df, x= df["tenure_grp"], hue = "Churn")
plt.show()

"""we can infer that customers are more likely to be churned within the first 12 months.

#Outlook¶
By taking appropriate measures for the identified target groups (e.g. offering additional services, optimized sales and resale processes, individualized approach, target group-specific advertising, etc.), customer loyalty can be improved and customer churn can be reduced.

One of the most powerful tools to avoid churn is churn prediction. Based on historical data, a machine learning model can be developed to predict future churn. However, the exact calculation of the churn rate alone is not decisive.

Because not all customers who are at risk of churning are worth the effort to keep them equally. In order to answer the question of which are the best customers of my company, a customer segmentation is necessary.

The segmentation results can then be used to retain the best customers with offers that are tailored to their needs (high product market fit).
"""





